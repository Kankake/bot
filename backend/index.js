import fs from 'fs'
import express from 'express'
import path, { dirname, resolve } from 'path'
import { fileURLToPath } from 'url'
import { Telegraf, Markup } from 'telegraf'
import XLSX from 'xlsx'
import fetch from 'node-fetch'
import mysql from 'mysql2/promise'
import dotenv from 'dotenv'
import path from 'path'
import express from 'express'

const app = express()

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ frontend
app.use(express.static(path.resolve(__dirname, '../frontend/')))

// –†–æ—É—Ç –¥–ª—è SPA
app.get('*', (req, res) => {
  res.sendFile(path.resolve(__dirname, '../frontend/index.html'))
})
dotenv.config();

console.log('üöÄ Bot starting up...');
console.log('Environment check:', {
  PORT: process.env.PORT,
  WEBAPP_URL: process.env.WEBAPP_URL,
  MYSQL_HOST: process.env.MYSQL_HOST,
  MYSQL_DBNAME: process.env.MYSQL_DBNAME,
  BOT_TOKEN: process.env.BOT_TOKEN ? 'SET' : 'NOT SET',
  ADMIN_CHAT_ID: process.env.ADMIN_CHAT_ID ? 'SET' : 'NOT SET'
});

const __filename = fileURLToPath(import.meta.url)
const __dirname  = dirname(__filename)

const WELCOME_PHOTO = path.join(__dirname, 'public', 'assets', 'welcome.jpg');
const NEXT_PHOTO = path.join(__dirname, 'public', 'assets', 'next.jpg');

// Load config from .env
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const WEBAPP_URL = process.env.WEBAPP_URL;
const PORT = process.env.PORT || 3000;
const WEBHOOK_PATH = '/tg-webhook';

// –æ–±—ä—è–≤–ª—è–µ–º pool –∑–∞—Ä–∞–Ω–µ–µ
let pool


let schedules = {}; // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

const awaitingScheduleUpload = new Set();
const awaitingCustomName = new Set();
const awaitingBroadcast = new Set();
const pendingReminders = new Map();
const pendingBookings = new Map();

// In-memory storage as fallback
const users = new Map();
const userNames = new Map();

if (!BOT_TOKEN || !ADMIN_CHAT_ID || !WEBAPP_URL) {
  console.error('‚ùå Missing BOT_TOKEN, ADMIN_CHAT_ID or WEBAPP_URL');
  process.exit(1);
}

// Database functions with fallback to memory
async function initDatabase() {
  if (!pool) {
    console.log('‚ö†Ô∏è No database configured, using memory storage');
    return;
  }
  
  try {
    console.log('üîÑ Testing MySQL connection...');
    const connection = await pool.getConnection();
    console.log('‚úÖ MySQL connection successful');
    connection.release();
    
    console.log('üîÑ Initializing MySQL database tables...');
    
    await pool.execute(`
      CREATE TABLE IF NOT EXISTS schedules (
        id INT AUTO_INCREMENT PRIMARY KEY,
        address VARCHAR(255) NOT NULL,
        schedule_data JSON NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);
    
    await pool.execute(`
      CREATE TABLE IF NOT EXISTS bot_users (
        user_id BIGINT PRIMARY KEY,
        first_name VARCHAR(255),
        username VARCHAR(255),
        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    await pool.execute(`
      CREATE TABLE IF NOT EXISTS user_names (
        chat_id BIGINT PRIMARY KEY,
        custom_name VARCHAR(255) NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);
    
    console.log('‚úÖ MySQL database tables initialized');
    schedules = await loadSchedules();
    
  } catch (err) {
    console.error('‚ùå Database initialization error:', err);
    console.log('‚ö†Ô∏è Falling back to memory storage');
    pool = null;
  }
}

async function addUser(userId, firstName, username) {
  if (pool) {
    try {
      await pool.execute(
        'INSERT INTO bot_users (user_id, first_name, username) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE first_name = VALUES(first_name), username = VALUES(username)',
        [userId, firstName || '', username || '']
      );
      console.log(`üë§ User added/updated in DB: ${userId}`);
      return;
    } catch (err) {
      console.error('‚ùå Failed to add user to DB:', err);
    }
  }
  
  // Fallback to memory
  users.set(userId, { firstName, username, addedAt: new Date() });
  console.log(`üë§ User added/updated in memory: ${userId}`);
}

async function getUsersCount() {
  if (pool) {
    try {
      const [rows] = await pool.execute('SELECT COUNT(*) as count FROM bot_users');
      return parseInt(rows[0].count);
    } catch (err) {
      console.error('‚ùå Failed to get users count from DB:', err);
    }
  }
  
  return users.size;
}

async function getAllUsers() {
  if (pool) {
    try {
      const [rows] = await pool.execute('SELECT user_id FROM bot_users');
      return rows.map(row => row.user_id);
    } catch (err) {
      console.error('‚ùå Failed to get all users from DB:', err);
    }
  }
  
  return Array.from(users.keys());
}

async function removeUser(userId) {
  if (pool) {
    try {
      await pool.execute('DELETE FROM bot_users WHERE user_id = ?', [userId]);
      console.log(`üë§ User removed from DB: ${userId}`);
      return;
    } catch (err) {
      console.error('‚ùå Failed to remove user from DB:', err);
    }
  }
  
  users.delete(userId);
  userNames.delete(userId);
  console.log(`üë§ User removed from memory: ${userId}`);
}

async function setUserName(chatId, name) {
  if (pool) {
    try {
      await pool.execute(
        'INSERT INTO user_names (chat_id, custom_name) VALUES (?, ?) ON DUPLICATE KEY UPDATE custom_name = VALUES(custom_name), updated_at = CURRENT_TIMESTAMP',
        [chatId, name]
      );
      return;
    } catch (err) {
      console.error('‚ùå Failed to set user name in DB:', err);
    }
  }
  
  userNames.set(chatId, name);
}

async function getUserName(chatId) {
  if (pool) {
    try {
      const [rows] = await pool.execute('SELECT custom_name FROM user_names WHERE chat_id = ?', [chatId]);
      return rows[0]?.custom_name || null;
    } catch (err) {
      console.error('‚ùå Failed to get user name from DB:', err);
    }
  }
  
  return userNames.get(chatId) || null;
}

async function saveSchedules(schedulesData) {
  if (pool) {
    try {
      await pool.execute('DELETE FROM schedules');
      
      for (const [address, scheduleArray] of Object.entries(schedulesData)) {
        await pool.execute(
          'INSERT INTO schedules (address, schedule_data) VALUES (?, ?)',
          [address, JSON.stringify(scheduleArray)]
        );
      }
      console.log('‚úÖ Schedules saved to MySQL database');
      return;
    } catch (err) {
      console.error('‚ùå Failed to save schedules to DB:', err);
    }
  }
  
  schedules = schedulesData;
  console.log('‚úÖ Schedules saved to memory');
}

async function loadSchedules() {
  if (pool) {
    try {
      const [rows] = await pool.execute('SELECT address, schedule_data FROM schedules');
      const loadedSchedules = {};
      
      for (const row of rows) {
        loadedSchedules[row.address] = JSON.parse(row.schedule_data);
      }
      
      console.log(`‚úÖ Loaded schedules for ${Object.keys(loadedSchedules).length} addresses from DB`);
      return loadedSchedules;
    } catch (err) {
      console.error('‚ùå Failed to load schedules from DB:', err);
    }
  }
  
  return {};
}

// Initialize database
await initDatabase();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
async function isAdminUser(ctx) {
  return ctx.chat.id.toString() === ADMIN_CHAT_ID;
}

// Initialize bot
const bot = new Telegraf(BOT_TOKEN);

// Add error handler
bot.catch((err, ctx) => {
  console.error('‚ùå Bot error:', err);
});

// Add debug middleware
bot.use((ctx, next) => {
  console.log('üì® Received:', ctx.updateType, 'from:', ctx.from?.id);
  return next();
});

// Function to send a message to a user and handle blocked users
async function sendMessageToUser(userId, message) {
  try {
    await bot.telegram.sendMessage(userId, message);
  } catch (error) {
    if (error.code === 403) {
      console.error(`User ${userId} has blocked the bot. Removing from database.`);
      await removeUser(userId);
    } else {
      console.error(`Failed to send message to user ${userId}:`, error.message);
    }
  }
}

// Function to update schedule from buffer
async function updateScheduleFromBuffer(buffer) {
  try {
    console.log('üìä Starting to process Excel buffer...');
    
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet);
    
    console.log('üìä Raw data from Excel:', data.length, 'rows');

    const newSchedules = {};
    let processedRows = 0;
    let errorRows = 0;

    data.forEach((row, index) => {
      try {
        if (!row.date || !row.time || !row.direction || !row.address) {
          console.log(`‚ö†Ô∏è Row ${index + 1} missing required fields`);
          errorRows++;
          return;
        }

        let dateValue = row.date;
        
        if (typeof dateValue === 'number') {
          dateValue = new Date((dateValue - 25569) * 86400 * 1000);
        } else {
          dateValue = new Date(dateValue);
        }
        
        if (isNaN(dateValue.getTime())) {
          console.log(`‚ö†Ô∏è Row ${index + 1} invalid date:`, row.date);
          errorRows++;
          return;
        }
        
        const formattedDate = dateValue.toISOString().split('T')[0];
        const address = row.address.toString().trim();

        if (!newSchedules[address]) {
          newSchedules[address] = [];
        }

        const orderedEntry = {
          date: formattedDate,
          time: row.time.toString().trim(),
          direction: row.direction.toString().trim(),
          address: address
        };

        newSchedules[address].push(orderedEntry);
        processedRows++;
        
      } catch (error) {
        console.error(`‚ùå Error processing row ${index + 1}:`, error);
        errorRows++;
      }
    });

    await saveSchedules(newSchedules);
    schedules = newSchedules;
    
    console.log('‚úÖ Schedules updated successfully');

    return { newSchedules, processedRows, errorRows };
    
  } catch (error) {
    console.error('‚ùå Error in updateScheduleFromBuffer:', error);
    throw error;
  }
}

// Set up menu commands
try {
  const publicCommands = [
    { command: 'start', description: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' },
    { command: 'contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏' }
  ];
  await bot.telegram.setMyCommands(publicCommands);

  const adminGroupCommands = [
    { command: 'update_schedule', description: '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' },
    { command: 'cancel_schedule', description: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' },
    { command: 'users_count', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { command: 'broadcast', description: '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è' },
    { command: 'check_schedules', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' }
  ];
  await bot.telegram.setMyCommands(adminGroupCommands, {
    scope: { type: 'chat', chat_id: Number(ADMIN_CHAT_ID) }
  });

} catch (err) {
  console.log('Command menu setup error:', err);
}

bot.start(async ctx => {
  const firstName = ctx.from.first_name || '–∫–ª–∏–µ–Ω—Ç';
  const username = ctx.from.username || '';
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  
  await addUser(userId, firstName, username);
  await setUserName(chatId, firstName);
  
  // Clear existing reminders
  if (pendingReminders.has(chatId)) {
    const {t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
  }
  
  // Set new reminders
  const t15 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 15 * 60 * 1000);

  const t3 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! üèÉ‚Äç‚ôÄÔ∏è –ú–µ—Å—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ‚Äî —É—Å–ø–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë!`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 3 * 60 * 60 * 1000);

  const t24 = setTimeout(() => {
    bot.telegram.sendMessage(
      chatId, 
      `${firstName}, —É—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ üíõ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –ø–æ–∫–∞ –∏—Ö –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ üôà`,
      Markup.inlineKeyboard([
        Markup.button.webApp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω', WEBAPP_URL)
      ])
    );
  }, 24 * 60 * 60 * 1000);

  pendingReminders.set(chatId, {t3, t15, t24 });

  await ctx.replyWithPhoto({ source: WELCOME_PHOTO });
  
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –Ω–∞—à –±—É–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç!\n` +
    `–Ø –õ–µ—è ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–∏–∏ –±–∞–ª–µ—Ç–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∏ LEVITA!\n\n` +
    `–ú–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏ "${firstName}", –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ?`,
    Markup.keyboard([['–î–∞', '–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è']])
      .resize()
      .oneTime()
  );
});

bot.hears('–î–∞', async ctx => {
  await ctx.replyWithPhoto({ source: NEXT_PHOTO });
  
  return ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', ctx => {
  ctx.reply(
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É:',
    Markup.inlineKeyboard([
      Markup.button.webApp('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ', WEBAPP_URL)
    ])
  );
});

bot.hears('üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', ctx => {
  return ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏ –º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.',
    Markup.keyboard([
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', {text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}]
    ])
    .resize()
  );
});

bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ctx => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
      ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ])
    .resize()
  );
});

bot.hears('–ö–æ–Ω—Ç–∞–∫—Ç—ã', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
    –°–≤–æ–±–æ–¥—ã 6 ‚Äî +7-928-40-85-968
    –í–∏–¥–æ–≤–∞ 210–î ‚Äî +7-993-32-12-000
    –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî +7-993-30-10-137`
  );
});

bot.hears('–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', async ctx => {
  awaitingCustomName.add(ctx.chat.id);
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:');
});

bot.on('text', async (ctx) => {
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
  const text = ctx.message.text;
  const botUsername = ctx.botInfo.username;
  
  if (text.startsWith(`/update_schedule@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
    awaitingScheduleUpload.add(ctx.chat.id);
    return ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
  
  if (text.startsWith(`/cancel_schedule@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (awaitingScheduleUpload.has(ctx.chat.id)) {
      awaitingScheduleUpload.delete(ctx.chat.id);
      ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } else {
      ctx.reply('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã users_count —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  if (text.startsWith(`/users_count@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ users_count —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);

    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    try {
      const count = await getUsersCount();
      return ctx.reply(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${count}`);
    } catch (err) {
      console.error('‚ùå Failed to get user count:', err);
      return ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
  if (text.startsWith(`/broadcast@${botUsername}`)) {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ broadcast —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
    
    if (!(await isAdminUser(ctx))) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    awaitingBroadcast.add(ctx.chat.id);
    return ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏
  if (awaitingCustomName.has(ctx.chat.id)) {
    const customName = ctx.message.text;
    await setUserName(ctx.chat.id, customName);
    awaitingCustomName.delete(ctx.chat.id);
    
    await ctx.replyWithPhoto({ source: NEXT_PHOTO });
    await ctx.reply(
      `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${customName}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.keyboard([
        ['üñ•Ô∏è –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω', 'üìû –ó–∞–ø–∏—Å—å –ø–æ –∑–≤–æ–Ω–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'],
        ['–ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ])
      .resize()
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
  if (awaitingBroadcast.has(ctx.chat.id)) {
    if (!(await isAdminUser(ctx))) {
      awaitingBroadcast.delete(ctx.chat.id);
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    const broadcastMessage = text;
    awaitingBroadcast.delete(ctx.chat.id);
    
    await ctx.reply('üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
    
    let successCount = 0;
    let errorCount = 0;
    
    const allUsers = await getAllUsers();
    
    for (const userId of allUsers) {
      try {
        await sendMessageToUser(userId, broadcastMessage);
        successCount++;
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        errorCount++;
        console.error(`Failed to send message to user ${userId}:`, error.message);
        
        if (error.message.includes('blocked') || error.message.includes('user not found') || error.message.includes('chat not found')) {
          await removeUser(userId);
        }
      }
    }
    
    const finalCount = await getUsersCount();
    await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalCount}`);
    return;
  }
});

bot.command('contacts', ctx => {
  ctx.reply(
    `–°–≤—è–∑—å —Å —Ä–µ—Å–µ–ø—à–Ω —Å—Ç—É–¥–∏–∏:
  –°–≤–æ–±–æ–¥—ã 6 ‚Äî +7-928-40-85-968
  –í–∏–¥–æ–≤–∞ 210–î ‚Äî +7-993-32-12-000
  –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 211/2 ‚Äî +7-993-30-10-137`
  );
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ update_schedule
bot.command('update_schedule', async (ctx) => {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ update_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id, 'ADMIN_CHAT_ID:', ADMIN_CHAT_ID);
  console.log('üîç –¢–∏–ø —á–∞—Ç–∞:', ctx.chat.type);
  
  if (!(await isAdminUser(ctx))) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω');
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  console.log('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
  awaitingScheduleUpload.add(ctx.chat.id);
  console.log('üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:', Array.from(awaitingScheduleUpload));
  
  await ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: date, time, direction, address');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
bot.command('cancel_schedule', async (ctx) => {
  console.log('üìù –ö–æ–º–∞–Ω–¥–∞ cancel_schedule –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', ctx.chat.id);
  
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  if (awaitingScheduleUpload.has(ctx.chat.id)) {
    awaitingScheduleUpload.delete(ctx.chat.id);
    ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
  } else {
    ctx.reply('‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('users_count', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  try {
    const count = await getUsersCount();
    return ctx.reply(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${count}`);
  } catch (err) {
    console.error('‚ùå Failed to get users count:', err);
    return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('broadcast', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  awaitingBroadcast.add(ctx.chat.id);
  ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
});

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
bot.on('document', async (ctx) => {
  console.log('üìÑ Document received from:', ctx.chat.id);
  console.log('üìã Awaiting upload list:', Array.from(awaitingScheduleUpload));
  
  if (!awaitingScheduleUpload.has(ctx.chat.id)) {
    console.log('‚ùå User not in awaiting list');
    return;
  }
  
  if (!(await isAdminUser(ctx))) {
    console.log('‚ùå User is not admin');
    return;
  }

  awaitingScheduleUpload.delete(ctx.chat.id);
  
  try {
    const fileName = ctx.message.document.file_name;
    console.log('üìÑ Processing file:', fileName);
    
    if (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls')) {
      return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)');
    }

    await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');

    const fileLink = await ctx.telegram.getFileLink(ctx.message.document.file_id);
    console.log('üîó File link obtained:', fileLink.href);
    
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();
    console.log('üì¶ Buffer size:', buffer.length, 'bytes');

    const result = await updateScheduleFromBuffer(buffer);
    
    await ctx.reply(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.processedRows}\nüè¢ –°—Ç—É–¥–∏–π: ${Object.keys(result.newSchedules).length}\n‚ö†Ô∏è –û—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö: ${result.errorRows}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

bot.command('check_schedules', async (ctx) => {
  if (!(await isAdminUser(ctx))) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
  
  const addressCount = Object.keys(schedules).length;
  const totalSlots = Object.values(schedules).reduce((sum, arr) => sum + arr.length, 0);
  
  let message = `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:\n`;
  message += `üè¢ –°—Ç—É–¥–∏–π: ${addressCount}\n`;
  message += `üìÖ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${totalSlots}\n\n`;
  
  if (addressCount > 0) {
    message += `–°—Ç—É–¥–∏–∏:\n`;
    Object.keys(schedules).forEach(address => {
      message += `‚Ä¢ ${address}: ${schedules[address].length} —Å–ª–æ—Ç–æ–≤\n`;
    });
  } else {
    message += `‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`;
  }
  
  await ctx.reply(message);
});

bot.on('contact', async ctx => {
  const chatId = ctx.chat.id;
  
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  
  // Clear reminders if exist
  if (pendingReminders.has(chatId)) {
    const {t3, t15, t24 } = pendingReminders.get(chatId);
    clearTimeout(t3);
    clearTimeout(t15);
    clearTimeout(t24);
    pendingReminders.delete(chatId);
  }

  const { first_name, phone_number } = ctx.message.contact;
  const telegram_id = ctx.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const userName = await getUserName(chatId) || first_name;
  
  // –î–æ–±–∞–≤–ª—è–µ–º + –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const formattedPhone = phone_number.startsWith('+') ? phone_number : `+${phone_number}`;
  
  // Get stored booking data
  const bookingData = pendingBookings.get(telegram_id);
  
  if (bookingData) {
    // This is a form submission - send complete booking data
    const msg = `–ù–æ–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:
      –¶–µ–ª—å: ${bookingData.goal}
      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${bookingData.direction}
      –°—Ç—É–¥–∏—è: ${bookingData.address}
      –°–ª–æ—Ç: ${bookingData.slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
    pendingBookings.delete(telegram_id);
  } else {
    // This is a callback request
    const msg = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:
      –ò–º—è: ${userName}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}
      ID: ${telegram_id}`;
      
    await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
  }
  
  await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', Markup.removeKeyboard());
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.hears(/.*/, async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
});

bot.on('callback_query', async (ctx) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
  await addUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
});


// Endpoints
app.post('/slots', (req, res) => {
  const { direction, address, days = 3 } = req.body;
  const now = new Date();
  const targetDate = new Date();
  targetDate.setDate(targetDate.getDate() + days);

  const arr = schedules[address] || [];

  const slots = arr
    .filter(slot => {
      const slotDateTime = new Date(`${slot.date}T${slot.time}`);
      const match = slot.direction.trim() === direction.trim();
      
      return match && !isNaN(slotDateTime.getTime()) && slotDateTime >= now && slotDateTime <= targetDate;
    })
    .map(slot => ({ date: slot.date, time: slot.time }))
    .sort((a, b) => {
      const dateA = new Date(`${a.date}T${a.time}`);
      const dateB = new Date(`${b.date}T${b.time}`);
      return dateA - dateB;
    });

  res.json({ ok: true, slots });
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-name/:telegram_id', async (req, res) => {
  const telegramId = parseInt(req.params.telegram_id);
  const userName = await getUserName(telegramId);
  
  res.json({ 
    ok: true, 
    name: userName 
  });
});

app.post('/submit', async (req, res) => {
  try {
    const bookingData = req.body;
    // Store booking data
    pendingBookings.set(bookingData.telegram_id, bookingData);
    
    await bot.telegram.sendMessage(
      bookingData.telegram_id,
      '–°–ø–∞—Å–∏–±–æ! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.',
      {
        reply_markup: {
          keyboard: [[{ text: 'üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', request_contact: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    );
    
    res.json({ ok: true });
  } catch (err) {
    console.error('Error in /submit:', err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

async function sendBookingToAdmin(bookingData) {
  const { goal, direction, address, name, phone, slot, telegram_id } = bookingData;
  
  const msg = `–ù–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫–∞:
    –¶–µ–ª—å: ${goal}
    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}
    –°—Ç—É–¥–∏—è: ${address}
    –°–ª–æ—Ç: ${slot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    –ò–º—è: ${name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
    ID: ${telegram_id}`;
    
  return await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg);
}

const isProd = process.env.NODE_ENV === 'production';

if (isProd) {
  // PRODUCTION: webhook –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–º—É HTTPS URL
  await bot.telegram.deleteWebhook();
  await bot.telegram.setWebhook(`${WEBAPP_URL}${WEBHOOK_PATH}`);
  app.use(bot.webhookCallback(WEBHOOK_PATH));
  app.listen(PORT, () =>
    console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBAPP_URL}${WEBHOOK_PATH}, –ø–æ—Ä—Ç ${PORT}`)
  );
} else {
  // DEVELOPMENT: long polling, –ø—Ä–æ—â–µ –≤—Å–µ–≥–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  await bot.launch();
  app.listen(PORT, () => console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling, –ø–æ—Ä—Ç ${PORT}`));
}

// graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
